using System;
using System.Linq;
using System.Text;
using DevExpress.Xpo;
using DevExpress.ExpressApp;
using System.ComponentModel;
//using DevExpress.ExpressApp.DC;
using DevExpress.Data.Filtering;
using DevExpress.Persistent.Base;
using System.Collections.Generic;
using DevExpress.ExpressApp.Model;
using DevExpress.Persistent.BaseImpl;
using DevExpress.Persistent.Validation;

namespace Cdb.Tickets.BusinessObjects
{
    [DefaultClassOptions]
    public class Ticket : BaseObject
    {        
        #region Private declarations
        private int ticketNumber; // should be Autogenerated i.e Auto Increment (need to research to see if it is possible in XPO or should it be manually autogenerated through code)
        private DateTime creationDate;
        private DateTime errorOccurDate;
        private DateTime errorIdentifiedDate;
        private string ticketDescription;
        private string followUp;
        private Priority priority;

        private TicketSource ticketSourceId;
        private TicketState ticketStateId;
        private TicketType ticketTypeId;
        private InternalUser raisedBy;
        private InternalUser assignedTo;
        private Client clientId;
        private Office officeId;

        #endregion
        public Ticket(Session session)
            : base(session)
        {
        }
        public override void AfterConstruction()
        {
            base.AfterConstruction();
            CreationDate = DateTime.Now;
        }

        #region Columns
        public int TicketNumber
        {
            get
            {
                return ticketNumber;
            }
            set
            {
                SetPropertyValue("TicketNumber", ref ticketNumber, value);
            }
        }
        public DateTime CreationDate
        {
            get
            {
                return creationDate;
            }
            set
            {
                SetPropertyValue("CreationDate", ref creationDate, value);
            }
        }
        public DateTime ErrorOccurDate
        {
            get
            {
                return errorOccurDate;
            }
            set
            {
                SetPropertyValue("ErrorOccurDate", ref errorOccurDate, value);
            }
        }
        public DateTime ErrorIdentifiedDate
        {
            get
            {
                return errorIdentifiedDate;
            }
            set
            {
                SetPropertyValue("errorIdentifiedDate", ref errorIdentifiedDate, value);
            }
        }
        public string TicketDescription
        {
            get
            {
                return ticketDescription;
            }
            set
            {
                SetPropertyValue("TicketDescription", ref ticketDescription, value);
            }
        }
        public string FollowUp
        {
            get
            {
                return followUp;
            }
            set
            {
                SetPropertyValue("FollowUp", ref followUp, value);
            }
        }
        public Priority Priority
        {
            get
            {
                return priority;
            }
            set
            {
                SetPropertyValue("Priority", ref priority, value);
            }
        }
        #endregion    }

        #region Foreign Keys
        [Association("TicketSource-Tickets"), ImmediatePostData]
        public TicketSource TicketSourceId
        {
            get
            {
                return ticketSourceId;
            }
            set
            {
                SetPropertyValue("TicketSourceId", ref ticketSourceId, value);
            }
        }
        [Association("TicketState-Tickets") , ImmediatePostData]
        public TicketState TicketStateId
        {
            get
            {
                return ticketStateId;
            }
            set
            {
                SetPropertyValue("TicketStateId", ref ticketStateId, value);
            }
        }
        [Association("TicketType-Tickets"), ImmediatePostData]
        public TicketType TicketTypeId
        {
            get
            {
                return ticketTypeId;
            }
            set
            {
                SetPropertyValue("TicketTypeId", ref ticketTypeId, value);
            }
        }
        [Association("InternalUser-TicketsRaisedBy"),ImmediatePostData]
        public InternalUser RaisedBy
        {
            get
            {
                return raisedBy;
            }
            set
            {
                SetPropertyValue("RaisedBy", ref raisedBy, value);
            }
        }
        [Association("InternalUser-TicketsAssignedTo"), ImmediatePostData]
        public InternalUser AssignedTo
        {
            get
            {
                return assignedTo;
            }
            set
            {
                SetPropertyValue("AssignedTo", ref assignedTo, value);
            }
        }
        [Association("Client-Tickets"), ImmediatePostData]
        public Client ClientId
        {
            get
            {
                return clientId;
            }
            set
            {
                SetPropertyValue("ClientId", ref clientId, value);
            }
        }
        [Association("Office-Tickets"), ImmediatePostData]
        public Office OfficeId
        {
            get
            {
                return officeId;
            }
            set
            {
                SetPropertyValue("OfficeId", ref officeId, value);
            }
        }

        #endregion

        #region OneToMany
        [Association("Ticket-Comments"), Aggregated]
        public XPCollection<Comment> Comments
        {
            get
            {
                return GetCollection<Comment>("Comments");
            }
        }
        [Association("Ticket-TicketResponses"), Aggregated]
        public XPCollection<TicketResponse> TicketResponses
        {
            get
            {
                return GetCollection<TicketResponse>("TicketResponses");
            }
        }


        #endregion

    }

    public enum Priority
    {
        [ImageName("State_Priority_Low")]
        Low = 0,
        [ImageName("State_Priority_Normal")]
        Normal = 1,
        [ImageName("State_Priority_High")]
        High = 2
    }
}